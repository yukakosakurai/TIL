手順

①ER図
主キー、外キー、どんな項目が必要かを決めて、どのテーブルとどのテーブルが関係性を持っているかというのを大まかに決めていく

②テーブル設計
それぞれのカラム名にどんなデータ型があるのか、デフォルト値は設定するか、nullかなど具体的に決めていく。

③アプリケーション設計
ページごとにアクションとhttpメソッドとURLを決める。


④アプリ作成
rails new NaganoCake

1,deviseインストール

2,モデル作成
rails g devise EndUser
rails g devise Admin

deviseで二つのモデルを作ることはできる、
こうすることで管理者側と会員側のさいとが作れる

3,devide用のviewを作成
 rails g devise:views
 
４、コントローラー作成
rails g devise:controllers end_users

rails g devise:controllers admins 
 
5,controller/application
 
 class ApplicationController < ActionController::Base
    before_action :configure_permitted_parameters, if: :devise_controller?
  protected
  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:last_name, :first_name, :last_name_kana, :first_name_kana, :post_code, :address, :phone_number])
  end

end


追加したカラムを使用できるようにする

６,サインアップしてみる
→you are on rails!!!

この画面見れるとうれしいんだわ


７,エンドユーザー＃トップページ
　rails g controller admin/homes top about　トップページ用のコントローラー作成
( https://www.javadrive.jp/rails/controller/index2.html)
rails g controller end_user/homes top about

adminファイル、end_usersファイルにいれたいからこういう風に書く。

８、ログイン後の遷移先　application_controller

def after_sign_in_path_for(resource)
        case resource
        when Admin
            "/admin/homes/top"
        when EndUser
            end_users_end_user_path(current_end_user) # ログイン後に遷移するpathを設定
        end
 end
 
 ログアウト後の遷移先
   
Application_controller.rbで
 def after_sign_out_path_for(resource)
        case resource
        when Admin
            new_admin_registration_path
        when EndUser
            root_path
        end
 end
としたところサインアウトはうまくいくがサインアウトができなかった。

どんな結果(問題)となったのか
ActionController::ActionControllerError in Admin::SessionsController#destroy
Cannot redirect to nil!

→解決方法。。。

def after_sign_out_path_for(resource)
        case resource
        when :admin  ("admin")
            new_admin_registration_path
        when :enduser ("end_user") デバイスの使用によって変更する！
            root_path
        end
 end
 
という風に変える。

大文字のAdminとEndUserではモデル名（テーブル名）を書いているだけでログインされた情報が入っていない。なぜならログインしてしまっていて情報がないから。
そこでログインする際に最低限残しておく必要があるものがある。
それはモデル名！！！重要なのはモデル名を文字列として残すこと！！！！
rubyを学ぼうの3章であるように文字列にするためには""/''で囲む必要がある。
だから上のように変更した。

サインインの時はcreateでモデルが作られresourceの中に入るが、サインアウトしてしまうとAdminやendusersの情報はresourceの中からなくなってしまう。
これが違い。

 admin,end_userで遷移先が異なるから書き方を変える
 
 いつもの遷移先の書き方
 http://31webcreation.hatenablog.com/entry/set-page-after-login-and-logout
　
 deviseが複数あるとき
 https://qiita.com/kemako/items/c0d6d65b37fea873e700
 
 ９、ログイン・非ログイン時のヘッダー
  <% if end_user_signed_in? %>
      <li class="">
      <%= link_to "LOGO", root_path %>
        <%= link_to 'マイページ', end_users_end_user_path(current_end_user) %>
      </li>
       <li class="">
        <%= link_to '商品一覧', "" %>
      </li>
      <li class="">
        <%= link_to 'カート', "" %>
      </li>
      <li class="">
        <%= link_to "ログアウト", destroy_end_user_session_path, method: :delete %>
      </li>
    <% elsif admin_signed_in? %>　※エンドユーザーがサインアウトしたら現れる。
        <%= link_to "LOGO", "/admin/homes/top" %>
        <li class="">
        <%= link_to "商品一覧", "" %>
        </li>
        <li class="">
        <%= link_to "会員一覧", "" %>
       </li>
       <li class="">
        <%= link_to "注文履歴一覧", "" %>
       </li>
       <li class="">
        <%= link_to "ジャンル一覧", "" %>
       </li>
        <li><%= link_to "ログアウト", destroy_admin_session_path, method: :delete %></li>
    <% else %> <% if end_user_signed_in? %>
      <li class="">
      ここには会員がログイン時のヘッダー
    <% elsif admin_signed_in? %>
        ここには管理側のログイン時のヘッダー
    <% else %>
 　　ここには会員側の非ログイン時のヘッダー
   
   
 10,エンドユーザー/マイページ
 
 サインアップの時に登録した情報を表示させる。
 編集する―ログイン情報を編集できる
 
 11、会員情報編集ページ
 登録した情報を編集したり、退会したりできる
 
 ※課題提出の仕方
 git clone sshのurl 
 git checkout -b ブランチ名
 (git init)
 git add *
 git commit -m "メッセージ"
 git remote add origin "sshのパス"
 git push origin ブランチ名
 
 12、※seed　
 seedとは…初期データの事。データを削除しても削除されたくないものなどを登録しておく
 管理者側のログイン情報をあらかじめ登録するからサインアップの画面が不要！
 
　db/seed.rb
 
 Admin.create!(
    email: "a@a",
    password: "aaaaaa"
)

rails db:seedもわすれずに！！

13、退会確認画面
route.rbにindexを追加
viewにindexを追加

end_users/index
<h1>エンドユーザ#退会確認画面</h1>
<h1>本当に退会しますか？</h1>
<p>退会すると、会員登録情報や<br>
これまでの購入履歴が閲覧できなくなります。<br>
退会する場合は、「退会する」をクリックしてください。</p>
<%= link_to '退会しない', end_users_end_user_path(@user) %> 退会しない場合はマイページ
<%= link_to '退会する', destroy_end_user_session_path, method: :delete, data: { confirm: '本当に退会しますか？' } %>　退会する場合はログアウトして退会

14．エンドユーザー＃編集ページ
ルーティングにedit、updateを追加
コントローラー
def edit
        @user=EndUser.find(params[:id])
    end


def update
        @user=EndUser.find(params[:id])
        @user.update(end_user_params)
        redirect_to end_users_end_user_path(@user)
end

変更

ビュー
<%= form_with model: @user, url: { action: :update },  local: true do |f| %>
  <h4>名前</h4>
  <a>(姓)</a>
  <%= f.text_field :last_name%>  
  <a>(名)</a>
  <%= f.text_field :first_name%>  
  <h4>フリガナ</h4>
  <a>(セイ)</a>
  <%= f.text_field :last_name_kana%>  
  <a>(メイ)</a>
  <%= f.text_field :first_name_kana%>
  <h4>メールアドレス</h4>
  <%= f.email_field :email%>
  <h4>郵便番号</h4>
  <%= f.text_field :post_code%>
  <h4>住所</h4>
  <%= f.text_field :address%>
  <h4>電話番号</h4>
  <%= f.text_field :phone_number%>
  <%= f.submit '編集内容を保存する' %>
<% end %>

15.退会済みのユーザーをログインできないようにする

論理削除・物理削除の違い

物理削除…DBからデータを削除すること
論理削除…DBにフラグとなるフィールドのを作成することで仮想的に見えなくすること。


id classの違い

基本的には、「すべてのスタイルはclass属性を使って適用する」と考えておけば問題ありません。必要に応じてid属性を使うと良いでしょう。スタイルを適用する上でclass属性とid属性を併用することには、メリットもデメリットもあります。

■class属性に加えてid属性も併用する場合のメリット
id名が1ページ中に1回しか登場しないという仕様は、スタイルシートのソースを読み解く際にも役立ちます。装飾に「id」が使われていれば、「どこか一意に特定できる部分だけに限定した装飾なのだ」と簡単に把握できますから。

■class属性に加えてid属性も併用する場合のデメリット
スタイルの適用には優先順位があり、「idはclassよりも優先される」という規則があります(※次のページで紹介)。このため、idとclassが複雑に混在する大規模なソースでは、何がどう適用されるのか「優先度の判別」が難しくなってしまう場合もあります。そのため、「極力idを使わずにclassだけで記述する方が楽」という考え方もあります。

id属性を使うかどうかは、その要素を「一意に特定する必要があるか」や「一意に特定する方が分かりやすいか」を基準に判断すると良いでしょう。どちらにも当てはまらないのなら、class属性を使っておけば問題ありません。







