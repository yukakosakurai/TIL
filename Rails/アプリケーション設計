アプリケーション設計

＜要件定義＞
クライアントから引き出した要求をもとに、必要な機能やいつまでに完成させるかをまとめる。
設計はこの要件定義が基礎となるし、クライアントの要求を明確にしクライアントと合意させることが必要。

＜全体設計＞
アプリケーションの全体像を設計

＜システム設計＞
アプリケーション開発や稼働に必要なインフラ、ネットワークなどを設計。

私は人と関わる仕事がしたい。自分が頑張った結果が目に見えることを仕事にできたらどんなに幸せだろうか。。
だから要件定義書を作成する仕事ができたらいい。
クライアントの要件をエンジニアが分かりやすいように設計できる、仲介的な存在。
そのためにコミュニケーション力も必要だし、技術力も必要。
全部つながっている。


主なアクション
閲覧	index	show
生成	new	create

newとcreateの違い

newはオブジェクトを生成するだけでDBには反映されない。
createはオブジェクトを生成して、保存して、INSERTまで行う。


更新	edit	update
削除	delete	-


例）
 Prefix   Verb   URI Pattern                 Controller#Action
    tweets   GET    /tweets(.:format)           tweets#index
             POST   /tweets(.:format)           tweets#create
 new_tweet   GET    /tweets/new(.:format)       tweets#new
edit_tweet   GET    /tweets/:id/edit(.:format)  tweets#edit
     tweet   GET    /tweets/:id(.:format)       tweets#show
             PATCH  /tweets/:id(.:format)       tweets#update
             PUT    /tweets/:id(.:format)       tweets#update
             DELETE /tweets/:id(.:format)       tweets#destroy
             
             大体こんな感じになる。

URLの構造
http://localhost:3000/ディレクトリ名/ファイル名
↓　　　　　　　　↓
プロトコル名　　ホスト名＋ドメイン名

ディレクトリ名：サーバー内のフォルダ名とそのフォルダの位置を表す文字列のこと

＜idを取得するURLの書き方＞
一般的に/:idと記述する。
具体的な数字を書いてしまうとその数字という意味のurlになってしまう。



Namespace(名前空間）
...メソッド名や変数名などが衝突しないようにするための機能
　同名での定義を防ぐためにモジュールやクラスを使う

rubyは同じメソッドが使われると、エラーにならずどちらかのみ使用される
モジュール：インスタンス化ができない（固定値やメソッドのみを持つ）
クラス：インスタンス化できる

モジュールの定義
Module ModuleName
...

End

で定義。

モジュール内のファンクションを実行するにはモジュール名の後に::を付けることでメソッドにアクセスできる。

module FirstModule
  def self.foo
    puts "foo 1st"
  end
end
module SecondModule
  def foo
    puts "foo 2nd"
   end
  module_function :foo
end
FirstModule::foo
SecondModule::foo

貼り付け元  <https://techacademy.jp/magazine/22391> 

namespaceはURLをグループ化できるので、メンテナンスしやすい

ユーザーが利用する画面と管理者側で画面を分けたい時

貼り付け元  <https://qiita.com/tomoharutt/items/445dd53e9c74b6e8c7e3> 

ルーティングに、、、
namespace :admin do
  resources :users 
end

scope module: :public do
  resources :users 
end

使い方

namespace グループ化したいディレクトリ名　do
 httpメソッド　実際の表記されるURL, :to => "コントローラー名#アクション名"
End

アクション
7つ以外のアクション
 member  idを持たせてアクションに引き渡したい。
 collection　idを持たせない。アクションに引き渡す必要がない。

ユーザーの退会処理は削除することではないからDELETEじゃなく、PATCH

